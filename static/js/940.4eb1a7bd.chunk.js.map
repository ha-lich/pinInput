{"version":3,"file":"static/js/940.4eb1a7bd.chunk.js","mappings":"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","sources":["views/components/PinInput.tsx","views/pages/home/index.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { Button, notification } from 'antd';\r\nimport { useVerifyPinMutation } from '@apps/services/pinService';\r\n\r\nconst PinInput = () => {\r\n  const regex = /^[0-9]$/;\r\n  const pinLength = 6;\r\n  const [pinDigits, setPinDigits] = useState(Array(pinLength).fill(''));\r\n  const [isSecretMode, setIsSecretMode] = useState(false);\r\n  const pinInputRefs = useRef<any>([]);\r\n  const [verify] = useVerifyPinMutation()\r\n\r\n\tuseEffect(() => {\r\n    checkCompletion();\r\n  }, [pinDigits]);\r\n\r\n  const handleInput = (index: number, value: string) => {\r\n    const digit = value.charAt(0);\r\n\r\n    if (!regex.test(digit)) {\r\n      setPinDigits((prevDigits) => {\r\n        const newDigits = [...prevDigits];\r\n        newDigits[index] = '';\r\n        return newDigits;\r\n      });\r\n      return;\r\n    }\r\n\r\n    setPinDigits((prevDigits) => {\r\n      const newDigits = [...prevDigits];\r\n      newDigits[index] = digit;\r\n      return newDigits;\r\n    });\r\n\r\n    if (digit !== '') {\r\n      focusNextEmptyBox(index);\r\n    }\r\n  };\r\n\r\n  const handlePaste = (event: any, index: number) => {\r\n    const pastedText = event.clipboardData.getData('text');\r\n    const digits = pastedText.slice(0, pinLength).split('');\r\n\r\n    digits.forEach((digit: number, i: number) => {\r\n      if (!isNaN(digit) && index + i < pinLength) {\r\n        setPinDigits((prevDigits) => {\r\n          const newDigits = [...prevDigits];\r\n          newDigits[index + i] = digit;\r\n          return newDigits;\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleKeyDown = (event: any, index: number) => {\r\n    if (event.key === 'Backspace' && index > 0 && pinDigits[index] === '') {\r\n      focusPreviousBox(index);\r\n    }\r\n  };\r\n\r\n  const focusNextEmptyBox = (index: number) => {\r\n    for (let i = index + 1; i < pinLength; i++) {\r\n      if (pinDigits[i] === '') {\r\n        pinInputRefs.current[i].focus();\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const focusPreviousBox = (index: number) => {\r\n    for (let i = index - 1; i >= 0; i--) {\r\n      if (pinDigits[i] === '') {\r\n        pinInputRefs.current[i].focus();\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkCompletion = async () => {\r\n    console.log(pinDigits);\r\n    const isComplete = pinDigits.every((digit) => digit !== '');\r\n\r\n    if (isComplete) {\r\n      const pinData = {\r\n        status: 200,\r\n        data: {\r\n          pin: pinDigits.join(''),\r\n        },\r\n      };\r\n      const valid: any = await verify(pinData);\r\n      if (valid.data.status === 200) {\r\n        notification.success({\r\n          message: `The PIN is valid with the value ${valid.data.data.pin}`\r\n        })\r\n      }\r\n    }\r\n  };\r\n\r\n  const isDisabled = (index: number) => {\r\n    return index >= pinLength;\r\n  };\r\n\r\n  const toggleSecretMode = () => {\r\n    setIsSecretMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  return (\r\n    <div id='pin_input'>\r\n        <div className=\"secret-mode\">\r\n        <Button type=\"primary\" onClick={toggleSecretMode}>\r\n          {isSecretMode ? 'Disable Secret Mode' : 'Enable Secret Mode'}\r\n        </Button>\r\n      </div>\r\n      <div className=\"pin-input\">\r\n        {pinDigits.map((digit, index) => (\r\n            <input\r\n            key={index}\r\n            type={isSecretMode ? 'password' : 'text'}\r\n            maxLength={1}\r\n            value={digit}\r\n            onChange={(e) => handleInput(index, e.target.value)}\r\n            onPaste={(e) => handlePaste(e, index)}\r\n            onKeyDown={(e) => handleKeyDown(e, index)}\r\n            disabled={isDisabled(index)}\r\n            className={digit !== '' ? 'filled' : ''}\r\n            autoFocus={index === 0}\r\n            ref={(ref) => (pinInputRefs.current[index] = ref)}\r\n            />\r\n        ))}\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PinInput;\r\n","import PinInput from '@components/PinInput';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <PinInput />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["regex","_useState","useState","Array","fill","_useState2","_slicedToArray","pinDigits","setPinDigits","_useState3","_useState4","isSecretMode","setIsSecretMode","pinInputRefs","useRef","_useVerifyPinMutation","useVerifyPinMutation","verify","useEffect","checkCompletion","focusNextEmptyBox","index","i","current","focus","focusPreviousBox","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","pinData","valid","wrap","_context","prev","next","console","log","every","digit","status","data","pin","join","sent","notification","message","concat","stop","apply","arguments","isDisabled","_jsxs","id","children","_jsx","className","Button","type","onClick","prevMode","map","maxLength","value","onChange","e","charAt","test","prevDigits","newDigits","_toConsumableArray","handleInput","target","onPaste","event","clipboardData","getData","slice","split","forEach","isNaN","handlePaste","onKeyDown","key","handleKeyDown","disabled","autoFocus","ref","PinInput"],"sourceRoot":""}